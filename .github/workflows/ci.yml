name: CI / CD

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: Target environment for manual deployment
        required: true
        default: staging
        type: choice
        options:
          - staging
          - production

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Lint / Test / Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GO_VERSION: '1.22'
      NODE_VERSION: '20.11.1'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.4
          run_install: false

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store/v3
          key: ${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: make deps

      - name: Terraform validate
        working-directory: terraform/environments/dev
        run: |
          terraform init -backend=false
          terraform validate

      - name: Run lint
        run: make lint

      - name: Run tests
        run: make test

      - name: Run build
        run: make build

  deploy:
    name: Deploy via Cloud Build
    needs: quality
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    permissions:
      contents: read
      id-token: write
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'staging' }}
    env:
      CLOUD_RUN_REGION: ${{ vars.CLOUD_RUN_REGION }}
      ARTIFACT_REPO: ${{ vars.CLOUD_BUILD_ARTIFACT_REPO }}
      ARTIFACT_REPO_LOCATION: ${{ vars.CLOUD_BUILD_ARTIFACT_LOCATION || vars.CLOUD_RUN_REGION }}
      BACKEND_SERVICE: ${{ vars.CLOUD_RUN_BACKEND_SERVICE }}
      FRONTEND_SERVICE: ${{ vars.CLOUD_RUN_FRONTEND_SERVICE }}
      VPC_CONNECTOR: ${{ vars.CLOUD_RUN_VPC_CONNECTOR }}
      BACKEND_SERVICE_ACCOUNT: ${{ vars.BACKEND_SERVICE_ACCOUNT_EMAIL || secrets.BACKEND_SERVICE_ACCOUNT_EMAIL }}
      FRONTEND_SERVICE_ACCOUNT: ${{ vars.FRONTEND_SERVICE_ACCOUNT_EMAIL || secrets.FRONTEND_SERVICE_ACCOUNT_EMAIL }}
      FRONTEND_API_BASE_URL: ${{ vars.FRONTEND_API_BASE_URL || secrets.FRONTEND_API_BASE_URL }}
      BACKEND_TRAFFIC_PERCENT: ${{ vars.BACKEND_TRAFFIC_PERCENT }}
      FRONTEND_TRAFFIC_PERCENT: ${{ vars.FRONTEND_TRAFFIC_PERCENT }}
      BACKEND_GOOGLE_CLIENT_ID: ${{ vars.BACKEND_GOOGLE_CLIENT_ID || secrets.BACKEND_GOOGLE_CLIENT_ID }}
      BACKEND_SECRET_JWT: ${{ secrets.BACKEND_SECRET_JWT }}
      BACKEND_SECRET_STATE: ${{ secrets.BACKEND_SECRET_STATE }}
      BACKEND_SECRET_CSRF: ${{ secrets.BACKEND_SECRET_CSRF }}
      BACKEND_SECRET_GOOGLE_CLIENT_SECRET: ${{ secrets.BACKEND_SECRET_GOOGLE_CLIENT_SECRET }}
      BACKEND_SECRET_RECAPTCHA: ${{ secrets.BACKEND_SECRET_RECAPTCHA }}
      FRONTEND_SECRET_RECAPTCHA: ${{ secrets.FRONTEND_SECRET_RECAPTCHA }}
      FIRESTORE_DATABASE_ID: ${{ vars.FIRESTORE_DATABASE_ID }}
      FIRESTORE_COLLECTION_PREFIX: ${{ vars.FIRESTORE_COLLECTION_PREFIX }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Build and Deploy
        env:
          DEPLOY_ENV: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'staging' }}
        run: |
          set -euo pipefail

          if [[ -z "${BACKEND_SERVICE_ACCOUNT:-}" && -n "${FRONTEND_SERVICE_ACCOUNT:-}" ]]; then
            echo "BACKEND_SERVICE_ACCOUNT is not set. Falling back to FRONTEND_SERVICE_ACCOUNT." >&2
            BACKEND_SERVICE_ACCOUNT="${FRONTEND_SERVICE_ACCOUNT}"
          fi

          if [[ -z "${BACKEND_SECRET_CSRF:-}" && -n "${BACKEND_SECRET_STATE:-}" ]]; then
            echo "BACKEND_SECRET_CSRF is not set. Falling back to BACKEND_SECRET_STATE." >&2
            BACKEND_SECRET_CSRF="${BACKEND_SECRET_STATE}"
          fi

          : "${CLOUD_RUN_REGION:?Missing CLOUD_RUN_REGION var}"
          : "${ARTIFACT_REPO:?Missing CLOUD_BUILD_ARTIFACT_REPO var}"
          : "${ARTIFACT_REPO_LOCATION:?Missing CLOUD_BUILD_ARTIFACT_LOCATION var}"
          : "${BACKEND_SERVICE:?Missing CLOUD_RUN_BACKEND_SERVICE var}"
          : "${FRONTEND_SERVICE:?Missing CLOUD_RUN_FRONTEND_SERVICE var}"
          : "${BACKEND_SERVICE_ACCOUNT:?Missing BACKEND_SERVICE_ACCOUNT_EMAIL var}"
          : "${FRONTEND_SERVICE_ACCOUNT:?Missing FRONTEND_SERVICE_ACCOUNT_EMAIL var}"
          : "${BACKEND_SECRET_JWT:?Missing BACKEND_SECRET_JWT secret}"
          : "${BACKEND_SECRET_STATE:?Missing BACKEND_SECRET_STATE secret}"
          : "${BACKEND_SECRET_CSRF:?Missing BACKEND_SECRET_CSRF secret}"

          if [[ -z "${BACKEND_GOOGLE_CLIENT_ID:-}" ]]; then
            echo "BACKEND_GOOGLE_CLIENT_ID is not set. Google OAuth endpoints will be disabled." >&2
          fi
          : "${BACKEND_SECRET_GOOGLE_CLIENT_SECRET:?Missing BACKEND_SECRET_GOOGLE_CLIENT_SECRET secret}"
          : "${FRONTEND_API_BASE_URL:?Missing FRONTEND_API_BASE_URL var}"
          FRONTEND_API_BASE_URL="${FRONTEND_API_BASE_URL%/}/"

          BACKEND_TRAFFIC="${BACKEND_TRAFFIC_PERCENT:-100}"
          FRONTEND_TRAFFIC="${FRONTEND_TRAFFIC_PERCENT:-100}"
          BACKEND_RECAPTCHA="${BACKEND_SECRET_RECAPTCHA:-}"
          FRONTEND_RECAPTCHA="${FRONTEND_SECRET_RECAPTCHA:-}"
          VPC_RAW="${VPC_CONNECTOR:-}"
          VPC_CANON="$(printf '%s' "${VPC_RAW}" | tr '[:upper:]' '[:lower:]')"
          if [[ -z "${VPC_CANON}" || "${VPC_CANON}" == "none" ]]; then
            VPC=""
          else
            VPC="${VPC_RAW}"
          fi
          FIRESTORE_DB="${FIRESTORE_DATABASE_ID:-(default)}"
          FIRESTORE_PREFIX="${FIRESTORE_COLLECTION_PREFIX:-}"

          SHORT_SHA="$(printf '%s' "${GITHUB_SHA}" | cut -c1-7)"
          ARTIFACT_HOST="${ARTIFACT_REPO_LOCATION}-docker.pkg.dev"
          BACKEND_IMAGE="${ARTIFACT_HOST}/${GCP_PROJECT_ID}/${ARTIFACT_REPO}/backend:${SHORT_SHA}"
          FRONTEND_IMAGE="${ARTIFACT_HOST}/${GCP_PROJECT_ID}/${ARTIFACT_REPO}/frontend:${SHORT_SHA}"

          gcloud auth configure-docker "${ARTIFACT_HOST}" --quiet

          if ! gcloud artifacts repositories describe "${ARTIFACT_REPO}" --location="${ARTIFACT_REPO_LOCATION}" >/dev/null 2>&1; then
            echo "Warning: Failed to describe Artifact Registry ${ARTIFACT_REPO_LOCATION}/${ARTIFACT_REPO}." >&2
            echo "Verify the repository exists and the workload identity principal has artifactregistry.repositories.get permission." >&2
          fi

          ensure_secret_ref() {
            local ref="$1"
            if [[ "${ref}" == *":"* ]]; then
              printf '%s' "${ref}"
            else
              printf '%s:latest' "${ref}"
            fi
          }

          docker build -f backend/Dockerfile -t "${BACKEND_IMAGE}" backend
          docker build -f frontend/Dockerfile -t "${FRONTEND_IMAGE}" frontend

          docker push "${BACKEND_IMAGE}"
          docker push "${FRONTEND_IMAGE}"

          ENV_VARS_BACKEND="GIN_MODE=release,ENV=${DEPLOY_ENV},APP_FIRESTORE_PROJECT_ID=${GCP_PROJECT_ID},APP_FIRESTORE_DATABASE_ID=${FIRESTORE_DB},APP_FIRESTORE_COLLECTION_PREFIX=${FIRESTORE_PREFIX},APP_GOOGLE_CLIENT_ID=${BACKEND_GOOGLE_CLIENT_ID},APP_SERVER_PORT=8080"
          BACKEND_SECRET_JWT_REF="$(ensure_secret_ref "${BACKEND_SECRET_JWT}")"
          BACKEND_SECRET_STATE_REF="$(ensure_secret_ref "${BACKEND_SECRET_STATE}")"
          BACKEND_SECRET_CSRF_REF="$(ensure_secret_ref "${BACKEND_SECRET_CSRF}")"
          BACKEND_SECRET_GOOGLE_CLIENT_SECRET_REF="$(ensure_secret_ref "${BACKEND_SECRET_GOOGLE_CLIENT_SECRET}")"
          BACKEND_SECRETS="APP_AUTH_JWT_SECRET=${BACKEND_SECRET_JWT_REF},APP_AUTH_STATE_SECRET=${BACKEND_SECRET_STATE_REF},APP_SECURITY_CSRF_SIGNING_KEY=${BACKEND_SECRET_CSRF_REF},APP_GOOGLE_CLIENT_SECRET=${BACKEND_SECRET_GOOGLE_CLIENT_SECRET_REF}"

          if [[ -n "${BACKEND_RECAPTCHA}" ]]; then
            BACKEND_SECRETS="${BACKEND_SECRETS},G_RECAPTCHA_SECRET=$(ensure_secret_ref "${BACKEND_RECAPTCHA}")"
          fi

          BACKEND_CMD=(
            gcloud run deploy "${BACKEND_SERVICE}-${DEPLOY_ENV}"
            --project="${GCP_PROJECT_ID}"
            --region="${CLOUD_RUN_REGION}"
            --platform=managed
            --image="${BACKEND_IMAGE}"
            --service-account="${BACKEND_SERVICE_ACCOUNT}"
            --execution-environment=gen2
            --no-allow-unauthenticated
            --set-env-vars="${ENV_VARS_BACKEND}"
            --set-secrets="${BACKEND_SECRETS}"
            --quiet
            --max-instances=3
            --labels="service=${BACKEND_SERVICE},stage=${DEPLOY_ENV},managed-by=github-actions"
          )

          if [[ -n "${VPC}" ]]; then
            BACKEND_CMD+=(--vpc-connector="${VPC}")
          else
            BACKEND_CMD+=(--clear-vpc-connector)
          fi

          "${BACKEND_CMD[@]}"

          if [[ "${BACKEND_TRAFFIC}" != "100" ]]; then
            echo "Warning: BACKEND_TRAFFIC_PERCENT=${BACKEND_TRAFFIC} is not currently applied. Update traffic manually via gcloud run services update-traffic." >&2
          fi

          ENV_VARS_FRONTEND="ENV=${DEPLOY_ENV},VITE_API_BASE_URL=${FRONTEND_API_BASE_URL},API_PROXY_PASS=${FRONTEND_API_BASE_URL}"
          FRONTEND_CMD=(
            gcloud run deploy "${FRONTEND_SERVICE}-${DEPLOY_ENV}"
            --project="${GCP_PROJECT_ID}"
            --region="${CLOUD_RUN_REGION}"
            --platform=managed
            --image="${FRONTEND_IMAGE}"
            --service-account="${FRONTEND_SERVICE_ACCOUNT}"
            --execution-environment=gen2
            --allow-unauthenticated
            --set-env-vars="${ENV_VARS_FRONTEND}"
            --quiet
            --labels="service=${FRONTEND_SERVICE},stage=${DEPLOY_ENV},managed-by=github-actions"
          )

          if [[ -n "${FRONTEND_RECAPTCHA}" ]]; then
            FRONTEND_CMD+=(--set-secrets="VITE_RECAPTCHA_SECRET=$(ensure_secret_ref "${FRONTEND_RECAPTCHA}")")
          fi

          if [[ -n "${VPC}" ]]; then
            FRONTEND_CMD+=(--vpc-connector="${VPC}")
          else
            FRONTEND_CMD+=(--clear-vpc-connector)
          fi

          "${FRONTEND_CMD[@]}"

          if [[ "${FRONTEND_TRAFFIC}" != "100" ]]; then
            echo "Warning: FRONTEND_TRAFFIC_PERCENT=${FRONTEND_TRAFFIC} is not currently applied. Update traffic manually via gcloud run services update-traffic." >&2
          fi
